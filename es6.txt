// let, var, cont (constant, read only)
// var is function scoped (availible inside the whole method you use it in)
// let and const are block scoped. should use these by default
let age = 2;

// anonymous function
let x = function() {
	code;
}

// arrow function examples
let x = (param1, param2) => {statement};
let x = () => returnvalue;

// default value
const increment = (number, value = 1) => number + value;

// rest opertator (takes in multiple parameters)
let x = (...nums) => nums;

// spread operator
const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
arr2 = [...arr1];

// destructuring
const { today, tomorrow, yesterday: y } = object; // rename yesterday to y

// destructuring arrays
let x  = ['apple', 'banana', 'strawberry'];
let [z, ...y] = x;
// z = apple
// y = [ 'banana', 'strawberry' ]

// template literals
let name = "Haris";
let x = `Hi my name is ${name}.`;

// object literals
const getMousePosition = (x, y) => ({
  x: x, // x: 25px example output
  y: y  // y: 50px
});

// classes
class Thermostat {	// UpperCamelCase name
  constructor(temp) {	// in fahrenheit. get and set in celsius
    this._temp = temp;
  }
  
  get temperature() {
    return (5/9 * (this._temp - 32));
  }

  set temperature(x) {
    this._temp = (x * 9.0 / 5 + 32);
  }
}

// import/export
// module script to use import/export
<script type="module" src="filename.js"></script>

// 2 ways to use export
export const add = (x, y) => {
  return x + y;
}

export { add };

// import
import { add, subtract } from './math_functions.js';
import * as myMathModule from "./math_functions.js";	// everything

// promises
const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to false to represent an unsuccessful response from a server
  let responseFromServer = false;
    
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
});

makeServerRequest.then(result => {	// if fulfilled
  console.log(result);
});

makeServerRequest.catch(error => {	// if not fulfilled
  console.log(error);
});
